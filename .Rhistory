}
return list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mi <- x$getInverse()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
matrix <- x$get()
mi <- solve(matrix)
x$setmean(mi)
mi
}
test <- makeCacheMatrix(x)
test$get
x$test$get
test$x$get
test$x$set
test$x$getInverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#Formula makes a list whose elments are functions which interact with matrices to
#set: "set" the matrix x into a scope level outside of the function (cache)
#get: "get" the matrix previously cached with "set"
#setInverse: "set" the inverse of matrix x into a scope level outside of
#the function (cache)
#getInverse: "get" the matrix inverse cached with "setInverse"
#For consistancy of style, curly brackets "{}" are used for all functions,
#including ones that can be written on a single lines.
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInverse <- function(solve) {
mi <<- solve
}
getInverse <- function() {
mi
}
return list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mi <- x$getInverse()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
matrix <- x$get()
mi <- solve(matrix)
x$setmean(mi)
mi
}
test <- makeCacheMatrix(x)
test$get
test$x$get
test$get$x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(list(1:5))
a <- makeVector(list(1:5))
a
a <- makeVector(list(1:5))
a$get
x$get
class(a)
last(test)
class(test)
test$get()
test$set()
test$set(matrix(4:1,2,2))
test$get()
test$getinverse()
test$getInverse()
cacheSolve(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#Formula makes a list whose elments are functions which interact with matrices to
#set: "set" the matrix x into a scope level outside of the function (cache)
#get: "get" the matrix previously cached with "set"
#setInverse: "set" the inverse of matrix x into a scope level outside of
#the function (cache)
#getInverse: "get" the matrix inverse cached with "setInverse"
#For consistancy of style, curly brackets "{}" are used for all functions,
#including ones that can be written on a single lines.
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInverse <- function(solve) {
mi <<- solve
}
getInverse <- function() {
mi
}
return list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mi <- x$getInverse()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
matrix <- x$get()
mi <- solve(matrix)
x$setInverse(mi)
mi
}
cacheSolve(test)
cacheSolve(test)
solve(matrix(4:1,2,2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#Formula makes a list whose elments are functions which interact with matrices to
#set: "set" the matrix x into a scope level outside of the function ("cache")
#get: "get" the matrix previously cached with "set"
#setInverse: "set" the inverse of matrix x into a scope level outside of
#the function (cache)
#getInverse: "get" the matrix inverse cached with "setInverse"
#For consistancy of style, curly brackets "{}" are used for all functions,
#including ones that can be written on a single lines.
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInverse <- function(solve) {
mi <<- solve
}
getInverse <- function() {
mi
}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mi <- x$getInverse()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
matrix <- x$get()
mi <- solve(matrix)
x$setInverse(mi)
mi
}
x
solve(x)
makeCacheMatrix(x)
xm <- makeCacheMatrix(x)
cacheSolve(xm)
cacheSolve(xm)
a <- matrix(runif(5^2), 5)
a
round(a %*% cacheSolve(makeCacheMatrix(a)), 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
dbeta(75, 0,1)
dbeta(.75, 0,1)
qbeta(.75,0,1)
qbeta(.75,2,1)
qbeta(.75,1,0)
?pnorm
pnorm(80,80,10)
pnorm(70,80,10)
qt(0.975, df = 1.152)
S2x <- 0.60
S2y <- 0.68
nx <- 10
ny <- 10
t = qt(0.975, df = 1.152)
meanDiff <- 2-5
S2 <- ((S2x/nx)+(S2y/ny))^(1/2)
upper <- meanDiff + t*S2
t*S2
degfree <- ((S2x/nx)+(S2y/ny))^2/((S2x/nx)^2/(nx-1) + (S2y/ny)^2/(ny-1))
t = qt(0.975, df = degfree)
meanDiff <- 2-5
S2 <- ((S2x/nx)+(S2y/ny))^(1/2)
upper <- meanDiff + t*S2
lower <- meandDiff - t*S2
lower <- meanDiff - t*S2
meanDiff <- 3-5
S2 <- ((S2x/nx)+(S2y/ny))^(1/2)
upper <- meanDiff + t*S2
lower <- meanDiff - t*S2
S2x <- 1.5
S2y <- 1.8
nx <- 9
ny <- 9
S2 <- ((nx-1)*S2x + (ny-1)*S2y)/(nx-ny-2)
S2 <- ((nx-1)*S2x + (ny-1)*S2y)/(nx+ny-2)
qt(.95,16)
sqrt(S2)
degfree <- nx+ny-2
meanDif <- -3-1
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
t <- qt(0.9, df = degfree)
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
t <- qt(0.975, df = degfree)
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
t <- qt(0.95, df = degfree)
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
#Question 7
S2x <- 1.5
S2y <- 1.8
nx <- 9
ny <- 9
S2 <- ((nx-1)*S2x + (ny-1)*S2y)/(nx+ny-2)
degfree <- nx+ny-2
t <- qt(0.95, df = degfree)
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
S2x <- 1.5^2
S2y <- 1.8^2
nx <- 9
ny <- 9
S2 <- ((nx-1)*S2x + (ny-1)*S2y)/(nx+ny-2)
degfree <- nx+ny-2
t <- qt(0.95, df = degfree)
meanDiff <- -3-1
upper <- meanDiff + t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
lower <- meanDiff - t*sqrt(S2)*(1/nx + 1/ny)^(1/2)
sqrt(S2)
1.7459*1.656804*(2/9)^(1/2)
-4-1.7459*1.656804*(2/9)^(1/2)
-4+1.7459*1.656804*(2/9)^(1/2)
qt(0.975,8)
setwd("C:/Users/Philip/Documents/Coursera/DataScienceSpecialization/ReResearchAssignment1/RepData_PeerAssessment1")
getwd()
ls
ls()
lsit.files
lsit.files()
list.files()
unzip(paste(getwd(), "/activity.zip", sep = ""))
activityData <- read.csv("activity.cvs")
activityData <- read.csv("activity.csv")
if("activity.csv" %in%) {print("test")}
if("activity.csv" %in% list.files()) {print("test")}
if("activity.csv" %in% list.files()) {
unzip(paste(getwd(), "/activity.zip", sep = ""))
}
activityData <- read.csv("activity.csv")
if(!"activity.csv" %in% list.files()) {
unzip(paste(getwd(), "/activity.zip", sep = ""))
}
activityData <- read.csv("activity.csv")
summary(activityData)
View(activityData)
2355/5
2355/(5*24)
2355/(5*12)
24*5*12
View(activityData)
24*60
names(activityData)
library(reshape2)
activityMelted <- melt(activityData,
id.vars = c("date", "interval"),
measure.vars = "steps",
na.rm = FALSE)
View(activityMelted)
class(activityMelted)
class(activityData)
activityCastTest <- dcast(activityMelted, date ~ steps, mean)
activityCastTest <- dcast(activityMelted, date ~ variable, mean)
View(activityCastTest)
activityCastTest <- dcast(activityMelted, date ~ variable, sum)
View(activityCastTest)
activityCastTest2 <- dcast(activityData, date ~ steps, sum)
View(activityCastTest2)
View(activityCastTest2)
activityCastTest <- dcast(activityMelted, date ~ varaible, sum)
activityCastTest <- dcast(activityMelted, date ~ variable, sum)
View(activityCastTest)
View(activityMelted)
activityDayTotals <- dcast(activityMelted, date ~ variable, sum)
mean(activityDayTotals)
View(activityDayTotals)
mean(activityDayTotals$steps)
mean(activityDayTotals$steps, na.rm = TRUE)
hist(activityDayTotals$steps)
summary(activityData)
summary(activityDayTotals)
hist(activityDayTotals$steps,
breaks = 61,
mean = "Histogram of Total Steps Taken Each Day"
xlab = "Total Steps in a Day")
hist(activityDayTotals$steps,
breaks = 61,
main = "Histogram of Total Steps Taken Each Day"
xlab = "Total Steps in a Day")
hist(activityDayTotals$steps,
breaks = 61,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps in a Day")
hist(activityDayTotals$steps,
breaks = 5,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 25,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 20,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 15,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
mean(activityDayTotals$steps, na.rm = TRUE)
hist(activityDayTotals$steps,
breaks = 5,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
#breaks = 5,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
hist(activityDayTotals$steps,
#     breaks = 10,
main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Each Day")
mean(activityDayTotals$steps, na.rm = TRUE)
median(activityDayTotals$steps, na.rm = TRUE)
activityDayTotals <- dcast(activityMelted, interval ~ variable, mean)
activityDayTotals <- dcast(activityMelted, date ~ variable, sum)
activityIntervalMeans <- dcast(activityMelted, interval ~ variable, mean)
View(activityIntervalMeans)
activityMelted <- melt(activityData,
id.vars = c("date", "interval"),
measure.vars = "steps",
na.rm = TRUE)
activityDayTotals <- dcast(activityMelted, date ~ variable, sum)
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
#   This code generates the mean number of steps taken each day
mean(activityDayTotals$steps, na.rm = TRUE)
View(activityMelted)
mean(activityDayTotals$steps)
#   This code generates the median number of steps taken each day
median(activityDayTotals$steps)
activityIntervalMeans <- dcast(activityMelted, interval ~ variable, mean)
View(activityIntervalMeans)
qplot(interval, steps, data = activityIntervalMeans, facets = . ~ type,
geom = "line",
xlab = "5-Minute Intervals",
ylab = "Mean Steps Across All Days",
main = "Mean Steps in Each 5-Minute Interval Across All Days"))
qplot(interval, steps, data = activityIntervalMeans, facets = . ~ type,
geom = "line",
xlab = "5-Minute Intervals",
ylab = "Mean Steps Across All Days",
main = "Mean Steps in Each 5-Minute Interval Across All Days")
library(ggplot2)
qplot(interval, steps, data = activityIntervalMeans, facets = . ~ type,
geom = "line",
xlab = "5-Minute Intervals",
ylab = "Mean Steps Across All Days",
main = "Mean Steps in Each 5-Minute Interval Across All Days")
qplot(interval, steps, data = activityIntervalMeans,
geom = "line",
xlab = "5-Minute Intervals",
ylab = "Mean Steps Across All Days",
main = "Mean Steps in Each 5-Minute Interval Across All Days")
summary(activityData)
sum(is.na(activityData[,1:3]))
sum(is.na(activityData[,1]))
sum(is.na(activityData[,2]))
sum(is.na(activityData[,3]))
colSums(is.na(activityData))
ActivityDataEstNAs <- merge(activityData, activityIntervalMeans,
by.x = "interval", by.y = "interval", all = FALSE)
View(ActivityDataEstNAs)
activityDataEstNAs <- merge(activityData, activityIntervalMeans,
by.x = "interval", by.y = "interval", all = FALSE)
}
activityDataEstNAs$steps <- if(is.na(activityDataEstNAs$steps.x)) {
activityDataEstNAs$steps.y
else {activityDataEstNAs$steps.x}
}
if(is.na(activityDataEstNAs$steps.x)) {
activityDataEstNAs$steps <-  activityDataEstNAs$steps.y
}   else {activityDataEstNAs$steps <-  activityDataEstNAs$steps.x}
activityDataEstNAs <- merge(activityData, activityIntervalMeans,
by.x = "interval", by.y = "interval", all = FALSE)
if(is.na(activityDataEstNAs$steps.x)) {
activityDataEstNAs$steps <-  activityDataEstNAs$steps.y
}   else {activityDataEstNAs$steps <-  activityDataEstNAs$steps.x}
View(activityDataEstNAs)
ctivityDataEstNAs$steps <-  activityDataEstNAs$steps.x
activityDataEstNAs$steps <-  activityDataEstNAs$steps.x
activityDataEstNAs$steps <-  activityDataEstNAs$steps.x
activityDataEstNAs$steps[is.na(activityDataEstNAs$steps)] <-
activityDataEstNAs$steps.y
View(activityDataEstNAs)
activityDataEstNAs$steps <-  activityDataEstNAs$steps.x
activityDataEstNAs$steps[is.na(activityDataEstNAs$steps)] <-
activityDataEstNAs$steps.y[is.na(activityDataEstNAs$steps)]
View(activityDataEstNAs)
View(activityDataEstNAs)
activityMeltedEstNAs <- melt(activityDataEstNAs,
id.vars = c("date", "interval"),
measure.vars = "steps")
View(activityMeltedEstNAs)
class(activityData$date)
activityDayTotalsEstNAs <- dcast(activityMeltedEstNAs, date ~ variable, sum)
#   This code plots the histogram shown below of the total number of steps taken
#each day
hist(activityDayTotalsEstNAs$steps,
breaks = 10,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
ylim = 25
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
ylim = 25,
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotals$steps,
breaks = 10,
ylim = c(0,25),
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotalsEstNAs$steps,
breaks = 10,
ylim = c(0,25),
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
hist(activityDayTotalsEstNAs$steps,
breaks = 10,
ylim = c(0,30),
main = "Histogram of Total Number of Steps Taken Each Day",
xlab = "Total Number Steps Each Day")
